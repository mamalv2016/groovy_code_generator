task helloworld <<{ 
		println "hello world" 
}
package com.codegenerate
import groovy.swing.SwingBuilder
import javax.swing.*
import java.awt.*
import groovy.sql.Sql
import com.codegenerate.DBTool
import com.codegenerate.StripeRenderer

class CodeGenerateSwing{
    static void main(String[] a){
        def window = new CodeGenerateSwing()
        window.show()
    }
    
    void show(){
        def sb = new SwingBuilder()
        
        def meneBar ={//菜单栏
            sb.menuBar{
                menu(text:'菜单',mnemonic:'F'){
                    menuItem(text:"退出程序",mnemonic:"X",actionPerformed:{dispose()})
                }
            }
        }
        def listans = []
        
        def searchPanel = {
            sb.panel(constraints:BorderLayout.NORTH){
                label("选择表名")
                searchFiled = textField(columns:15)
                button(text:"生成",actionPerformed:{/*生成代码*/
                    //edt闭包：表示在EDT上面同步执行
                    //doLater闭包：在EDT上面异步执行
                    //doOutSide闭包：启用新的线程执行
                   def db = new DBTool()
                   db.url = 'jdbc:mysql://10.200.2.11:3306/lvmama_traffic'
                   db.user = 'lvmama_traffic'
                   db.pass = 'lvmama_traffic'
                   db.init()
                   db.allTables()
                   edt{
                        for(i in 0 ..6){
                            listans<< '测试数据'+i
                        } 
                        resultList.listData =  listans.toArray()
                    }
                })
            }
        }
        
        def resultPanel ={
            sb.scrollPane(constraints:BorderLayout.CENTER){
                resultList = list(fixedCellWidth: 380, fixedCellHeight:15, cellRenderer:new StripeRenderer())
            }
        }
        
        sb.frame(title:'代码生成器',
                   defaultCloseOperation:JFrame.EXIT_ON_CLOSE,
                   size:[400,500],
                   show:true){
            meneBar()  
            searchPanel()    
            resultPanel()     
        }
    }
}
package com.codegenerate
import groovy.sql.Sql
class DBTool{
     String url
     String user
     String pass
     String driver = "org.gjt.mm.mysql.Driver" 
     Sql sql 

     def init(){ 
        println url
         println user
       // sql = Sql.newInstance(url,user,pass,driver)
     } 
     
     List allTables(){
       /*  sql.eachRow('''SELECT t.table_name AS name,t.TABLE_COMMENT AS comments FROM information_schema.`TABLES` t 
         WHERE t.TABLE_SCHEMA = (select database()) ORDER BY t.TABLE_NAME''')*/
     }
}
package com.codegenerate
import groovy.swing.SwingBuilder
import javax.swing.*
import java.awt.*

class StripeRenderer extends DefaultListCellRenderer {
    public Component getListCellRendererComponent(JList list, Object value,
            int index, boolean isSelected, boolean cellHasFocus) {
        JLabel label = (JLabel) super.getListCellRendererComponent(list, value,
                index, isSelected, cellHasFocus);
        
        if(index%2 == 0) {
            label.setBackground(new Color(230,230,255));
        }
         
        label.setVerticalAlignment(SwingConstants.TOP);
        return label;
    }
}
class Book{
   String  title
}
def aBook = new Book()
aBook.setTitle("Groovy in action")
assert aBook.getTitle() =='Groovy in action'
println  aBook.getTitle()
import com.lvmama.lvtraffic.promotion.common.dto.request.PromActivityCalculateRequest;
import com.lvmama.lvf.common.dto.*; 
import com.lvmama.lvtraffic.promotion.common.dto.promotion.*;
import com.lvmama.lvtraffic.promotion.common.client.*;

def req =new PromActivityCalculateRequest();
req.categoryType='LVFLIGHT'
req.bookingSource='PC'
req.totalOrderAmount=1300
req.departCity='上海'
req.arriveCity='北京'
req.airlineCode='CZ'
req.adultAmount=600
req.adultCount=2
req.childAmount=400
req.childCount=1
visitTime=1497413410000

PromotionActivityApiClient client = new  PromotionActivityApiClient();
BaseResultDto<PromotionActivityDto> result = client.getPromActivityWithAmount(req)
println result
def list=[1,2,3]
list.each{println it}
class Child {
   private String name
}

class Parent {
   Child child = new Child();

   void configChild(Closure c) {
      c.delegate = child
      c.setResolveStrategy Closure.DELEGATE_FIRST
      c()
   }
}

def parent = new Parent()
parent.configChild {
name = "child name"
}

println parent.child.name
//打印一个文件夹下面的全部目录，全部文件
def dir =new File("C:\\Users\\Administrator\\Desktop\\供应商同步串行处理") 
if (dir.isDirectory()) {  
    dir.eachFileRecurse { file ->  
        if(!file.isDirectory())
            println file
    }  
} 

/*new File(fileName).withPrintWriter { printWriter ->  
     printWriter.println('The first content of file')  
}  
*/
//println new File("d:\\cpdetail.txt").text  
//dir.eachFileMatch(~/.*\.xml/) {File it-> println it.name  } //使正则表达式匹配文件名  

//dir.eachFileMatch(FILES, ~/.*\.txt/) { File it-> println it.name  }   

def name='test'         //单引号
//双引号中可以有变量引用
println "$name"=='test'    
println '''       //三引号里面的变量引用使用了${},注意!三引号里面可以换行..
        ${name},
        保持格式，空格字符串
'''

def name2 = 'Groovy'
def template = """
    Dear Mr ${name2},

    You're the winner of the lottery!

    Yours sincerly,

    Dave
"""
println template
def x=3
def y=4
assert x+y==7
assert x.plus(y)==7
assert x instanceof Integer==true //输出true

//进行小数的取三位小数运算.
def a=2/3
def b = a.setScale(3,BigDecimal.ROUND_HALF_UP)
assert b.toString() == '0.667'

//进行不等于的比较
assert 4<=>3 ==1  //输出1
assert 4**3 == 64 //4的3次方,等于4.power(3)
println 4/3     //输出1.3333333333,等于4.div(3)
assert 8.intdiv(3) ==2 //输出1
assert 8%3 ==2 //取余,等于8.mod(3)
def name='test'         //单引号
assert "$name"=='test'     //双引号中可以有变量引用
println '''       //三引号里面的变量引用使用了${},注意!三引号里面可以换行..
        ${name},
        保持格式，空格字符串
'''
def firstname='Kate'
def surname='Bush'
//打印字符串的连接
assert firstname*2=='KateKate'
def fullname="$firstname $surname"
assert fullname=='Kate Bush'
assert fullname-firstname==' Bush'

//凑足15个字符,不够就在左边补充空格
assert fullname.padLeft(15)=='      Kate Bush'
//关于字符串的截取
assert fullname[0..3]=='Kate'
assert fullname[-4..-1]=='Bush'
//下面的方式比较特别,取第5个字符,以及3,2,1位置字符连接起来
assert fullname[5,3..1]=='Beta'
assert'apple'.toList() == ['a', 'p', 'p', 'l', 'e']
//下面把字符串里面去掉重复数字,并排序.
string = "an apple a day"
assert string.toList().unique().sort().join() == ' adelnpy'

//下面方法取出得到字符串里面的各个单词,并进行反转
string = 'Yoda said, "can you see this?"'
revwords= string.split(' ').toList().reverse().join(' ')
assert revwords== 'this?" see you "can said, Yoda'
 

def name='test'         //单引号

println "名字是：$name"      //双引号中可以有变量引用.如果有$，那么类型为GString

 //三引号里面的变量引用使用了${},注意!三引号里面可以换行..
//三个单引号里面，$不会生效
println '''              $name,
        保持格式，空格字符串
'''

//要在三引号里面打印占位符的话，使用三双引号：
println """             $name,
        保持格式，空格字符串
"""

import static groovyx.net.http.Method.GET  
import static groovyx.net.http.ContentType.TEXT  

def http = new HTTPBuilder( 'http://ajax.googleapis.com' )    
    
// perform a GET request, expecting JSON response data    
http.request( GET, JSON ) {    
  url.path = '/ajax/services/search/web'    
  url.query = [ v:'1.0', q: 'Calvin and Hobbes' ]    
    
  headers.'User-Agent' = 'Mozilla/5.0 Ubuntu/8.10 Firefox/3.0.4'    
    
  // response handler for a success response code:    
  response.success = { resp, json ->    
    println resp.statusLine    
    
    // parse the JSON response object:    
    json.responseData.results.each {     
      println "  ${it.titleNoFormatting} : ${it.visibleUrl}"    
    }    
  }    
    
  // handler for any failure status code:    
  response.failure = { resp ->    
    println "Unexpected error: ${resp.statusLine.statusCode} : ${resp.statusLine.reasonPhrase}"     
  }    
}   
import java.util.regex.*; 
class RegexExample1{
   public static void main(String args[]){
      String content = "I am noob " +
        "from runoob.com.";
 
      String pattern = ".*runoob.*";
 
      boolean isMatch = Pattern.matches(pattern, content);
      System.out.println("字符串中是否包含了 'runoob' 子字符串? " + isMatch);
   }
}
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

def source = new File("d:\\flight.txt").text

def slurper = new JsonSlurper()

def printAllCarrieName = {
    it-> 
    def allCarrieName = []
    def allFlight = it.results
    allFlight.each{
        a ->  allCarrieName<<a.carrierName
    }
    
    println allCarrieName
}

def jsonObject = slurper.parseText(source)

printAllCarrieName(jsonObject)

def map = [:] 
map = ['name':'Bruce', 'age':27]  
def json = JsonOutput.toJson(map)
println json
def str='12345'
//判断正则表达式匹配
if( str =~ /\d+/)
    println '全数字';
else
    println '不全是数字'    
   
//正则表达式替换 
def abc = str.replaceAll(/\d/,'x')       //和js里面的正则表达式一样？
assert abc == 'xxxxx' 
    
println str.replace(/\d/,'x') 
